//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/CustomActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""69f0f5c1-4334-4a1c-81fb-61ebcf234081"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""bfc6c90b-7347-4241-8f12-e34835687656"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""e32a4518-d530-4ea3-b850-0069c3c9d9ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Q_Skill"",
                    ""type"": ""Button"",
                    ""id"": ""1db10ead-2cea-467d-904a-a0459468b041"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W_Skill"",
                    ""type"": ""Button"",
                    ""id"": ""f63eed92-e84e-410d-b41c-08eb7b249574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R_Skill"",
                    ""type"": ""Button"",
                    ""id"": ""5520c7a9-52b5-4eb8-bf6c-8902c4caa7b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ward"",
                    ""type"": ""Button"",
                    ""id"": ""00c466dd-2f16-4fb2-b852-c74c4f4bab52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0eb343e7-c467-40c3-af0b-b0e1ae365c7c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""087021e3-5a05-4f95-9d3b-390f9f47c756"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74d4d60d-a012-47f7-9f8b-53f0f3936735"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W_Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de907d4f-e04a-4c8e-b41b-e63ec501347e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Q_Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6f80f8a-8f4a-439f-b137-48a0c603bc1a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R_Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d235bf3-24d2-48a3-80cc-e710da045ff7"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
        m_Main_Stop = m_Main.FindAction("Stop", throwIfNotFound: true);
        m_Main_Q_Skill = m_Main.FindAction("Q_Skill", throwIfNotFound: true);
        m_Main_W_Skill = m_Main.FindAction("W_Skill", throwIfNotFound: true);
        m_Main_R_Skill = m_Main.FindAction("R_Skill", throwIfNotFound: true);
        m_Main_Ward = m_Main.FindAction("Ward", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private List<IMainActions> m_MainActionsCallbackInterfaces = new List<IMainActions>();
    private readonly InputAction m_Main_Move;
    private readonly InputAction m_Main_Stop;
    private readonly InputAction m_Main_Q_Skill;
    private readonly InputAction m_Main_W_Skill;
    private readonly InputAction m_Main_R_Skill;
    private readonly InputAction m_Main_Ward;
    public struct MainActions
    {
        private @CustomActions m_Wrapper;
        public MainActions(@CustomActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Main_Move;
        public InputAction @Stop => m_Wrapper.m_Main_Stop;
        public InputAction @Q_Skill => m_Wrapper.m_Main_Q_Skill;
        public InputAction @W_Skill => m_Wrapper.m_Main_W_Skill;
        public InputAction @R_Skill => m_Wrapper.m_Main_R_Skill;
        public InputAction @Ward => m_Wrapper.m_Main_Ward;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void AddCallbacks(IMainActions instance)
        {
            if (instance == null || m_Wrapper.m_MainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Stop.started += instance.OnStop;
            @Stop.performed += instance.OnStop;
            @Stop.canceled += instance.OnStop;
            @Q_Skill.started += instance.OnQ_Skill;
            @Q_Skill.performed += instance.OnQ_Skill;
            @Q_Skill.canceled += instance.OnQ_Skill;
            @W_Skill.started += instance.OnW_Skill;
            @W_Skill.performed += instance.OnW_Skill;
            @W_Skill.canceled += instance.OnW_Skill;
            @R_Skill.started += instance.OnR_Skill;
            @R_Skill.performed += instance.OnR_Skill;
            @R_Skill.canceled += instance.OnR_Skill;
            @Ward.started += instance.OnWard;
            @Ward.performed += instance.OnWard;
            @Ward.canceled += instance.OnWard;
        }

        private void UnregisterCallbacks(IMainActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Stop.started -= instance.OnStop;
            @Stop.performed -= instance.OnStop;
            @Stop.canceled -= instance.OnStop;
            @Q_Skill.started -= instance.OnQ_Skill;
            @Q_Skill.performed -= instance.OnQ_Skill;
            @Q_Skill.canceled -= instance.OnQ_Skill;
            @W_Skill.started -= instance.OnW_Skill;
            @W_Skill.performed -= instance.OnW_Skill;
            @W_Skill.canceled -= instance.OnW_Skill;
            @R_Skill.started -= instance.OnR_Skill;
            @R_Skill.performed -= instance.OnR_Skill;
            @R_Skill.canceled -= instance.OnR_Skill;
            @Ward.started -= instance.OnWard;
            @Ward.performed -= instance.OnWard;
            @Ward.canceled -= instance.OnWard;
        }

        public void RemoveCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainActions instance)
        {
            foreach (var item in m_Wrapper.m_MainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnStop(InputAction.CallbackContext context);
        void OnQ_Skill(InputAction.CallbackContext context);
        void OnW_Skill(InputAction.CallbackContext context);
        void OnR_Skill(InputAction.CallbackContext context);
        void OnWard(InputAction.CallbackContext context);
    }
}
